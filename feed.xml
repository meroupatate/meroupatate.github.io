<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="https://meroupatate.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://meroupatate.github.io/" rel="alternate" type="text/html" /><updated>2021-01-08T10:42:28+00:00</updated><id>https://meroupatate.github.io/feed.xml</id><title type="html">meroupatate</title><subtitle>Hi there, I am Alice and I am a French engineering student at Télécom SudParis.</subtitle><entry><title type="html">How to restore an accidentally deleted Windows Boot Manager with a Windows / Arch Linux dual-boot installation</title><link href="https://meroupatate.github.io/2021/01/04/bootloader.html" rel="alternate" type="text/html" title="How to restore an accidentally deleted Windows Boot Manager with a Windows / Arch Linux dual-boot installation" /><published>2021-01-04T00:00:00+00:00</published><updated>2021-01-04T00:00:00+00:00</updated><id>https://meroupatate.github.io/2021/01/04/bootloader</id><content type="html" xml:base="https://meroupatate.github.io/2021/01/04/bootloader.html">&lt;p&gt;During my Arch Linux installation, I accidentally formatted the EFI system partition created by my existing Windows installation and replaced it with a new EFI system that starts Arch Linux using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt;.
While my initial goal was to have a Windows 10 / Arch Linux dual boot, I am currently only able to boot under Arch since I deleted my Windows Boot Manager files.&lt;/p&gt;

&lt;p&gt;In this article, I will describe how I managed to reinstall Windows Boot Manager on my EFI system and create a Windows 10 entry in systemd-boot.&lt;/p&gt;

&lt;h2 id=&quot;current-partitions&quot;&gt;Current partitions&lt;/h2&gt;

&lt;p&gt;Here is the list of my partitions after my Arch installation:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;fdisk &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt;
Device          Start        End    Sectors   Size Type
/dev/sda1        2048     534527     532480   260M EFI System
/dev/sda2      534528     567295      32768    16M Microsoft reserved
/dev/sda3      567296  926358296  925791001 441.5G Microsoft basic data
/dev/sda4   926359552  927473663    1114112   544M Windows recovery environment
/dev/sda5   927475712 1951475711 1024000000 488.3G Linux filesystem
/dev/sda6  1951475712 1953523711    2048000  1000M Windows recovery environment
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;As you can see, my Linux filesystem is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/sda5&lt;/code&gt; and my Windows filesystem is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/sda3&lt;/code&gt;. The other partitions are managed by the Windows installation: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/sda2&lt;/code&gt; is a &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/configure-uefigpt-based-hard-drive-partitions#microsoft-reserved-partition-msr&quot;&gt;Microsoft reserved partition&lt;/a&gt; and both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/sda4&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/sda6&lt;/code&gt; are recovery partitions (&lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/configure-uefigpt-based-hard-drive-partitions#recovery-tools-partition&quot;&gt;Windows RE&lt;/a&gt;) automatically created by Windows 10.&lt;/p&gt;

&lt;p&gt;Here, the interesting partition is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/sda1&lt;/code&gt;, which is the EFI system mounted as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/boot&lt;/code&gt; for my Linux installation. As I mentioned before, this partition was initially a &lt;a href=&quot;https://docs.microsoft.com/en-us/windows-hardware/manufacture/desktop/configure-uefigpt-based-hard-drive-partitions#system-partition&quot;&gt;System partition&lt;/a&gt; managed by Windows, but since I formatted the partition during my Linux installation, I now need to restore my Windows Boot Manager files on the partition in order to be able to boot both Windows 10 and Linux.&lt;/p&gt;

&lt;h2 id=&quot;restoring-the-windows-boot-manager-files&quot;&gt;Restoring the Windows Boot Manager files&lt;/h2&gt;

&lt;p&gt;The first step is to create a bootable USB drive for Windows 10. The Windows 10 ISO can be downloaded from the &lt;a href=&quot;https://www.microsoft.com/en-us/software-download/windows10ISO&quot;&gt;Microsoft website&lt;/a&gt;. Since the image uses around 6GB disk space, I got a 16GB USB drive to make sure I have enough disk space for the ISO image. It is important that this USB drive contains no useful data since the filesystem will be completely overwritten by the Windows ISO image.&lt;/p&gt;

&lt;p&gt;As shown in the following command output, my USB drive is detected as the new device &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/sdb&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;lsblk
NAME           MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINT
sda              8:0    0 931.5G  0 disk
├─sda1           8:1    0   260M  0 part  /boot
├─sda2           8:2    0    16M  0 part
├─sda3           8:3    0 441.5G  0 part
├─sda4           8:4    0   544M  0 part
├─sda5           8:5    0 488.3G  0 part
│ └─LVM        254:0    0 488.3G  0 crypt
│   ├─mvg-swap 254:1    0    20G  0 lvm   &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;SWAP]
│   ├─mvg-root 254:2    0    40G  0 lvm   /
│   └─mvg-home 254:3    0 428.3G  0 lvm   /home
└─sda6           8:6    0  1000M  0 part
sdb              8:16   1  14.8G  0 disk
└─sdb1           8:17   1  14.8G  0 part
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;To override all data within the USB drive with the Windows 10 ISO, I installed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;woeusb&lt;/code&gt; from AUR. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;woeusb&lt;/code&gt; is a tool to create a bootable Windows USB drive since &lt;a href=&quot;https://wiki.archlinux.org/index.php/USB_flash_installation_medium#BIOS_and_UEFI_bootable_USB&quot;&gt;standard ways of copying ISO to a USB drive&lt;/a&gt; do not work with Windows images.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;woeusb &lt;span class=&quot;nt&quot;&gt;--target-filesystem&lt;/span&gt; NTFS &lt;span class=&quot;nt&quot;&gt;--device&lt;/span&gt; Win10_20H2_v2_French_x64.iso /dev/sdb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Once the command has finished its execution, I rebooted from the newly created Windows installation drive (by changing the UEFI boot order in BIOS) and landed in the Windows installation screen.&lt;/p&gt;

&lt;p&gt;I then found a thread where Mark S. described how to create a lost EFI partition from an installation media. Since I already had an existing EFI system partition, I skipped the steps used to create and format the partition and only run the following steps:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Press &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SHIFT+F10&lt;/code&gt; on the Windows installation screen to open a command-line interpreter.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;diskpart&lt;/code&gt; to launch the disk management tool DiskPart.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list disk&lt;/code&gt; in DiskPart to get a list of existing disks.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select disk N&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;N&lt;/code&gt; refers to the number of the disk which contains our EFI system partition (for me it was Disk 0 so I ran &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;select disk 0&lt;/code&gt;).
&lt;img src=&quot;/assets/bootloader-01.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;list volume&lt;/code&gt; to get the list of the partitions in this disk.
&lt;img src=&quot;/assets/bootloader-02.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Find the letter corresponding to the volume with the existing Windows filesystem (in my case it is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C&lt;/code&gt; since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Volume 0&lt;/code&gt; is listed as my Windows filesystem).&lt;/li&gt;
  &lt;li&gt;Exit DiskPart by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exit&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bcdboot X:\Windows&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X&lt;/code&gt; is the letter found in the previous step. This command should copy the boot files from the Windows partition to our existing EFI system partition so that an entry will be created by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-boot&lt;/code&gt;.
&lt;img src=&quot;/assets/bootloader-03.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I then restarted and went back to the BIOS to change the default boot device back to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Linux Boot Loader&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/bootloader-04.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An new entry called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Windows Boot Manager&lt;/code&gt; has been created right below my &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Arch Linux&lt;/code&gt; entry and I now have an operational dual boot ! :D&lt;/p&gt;</content><author><name></name></author><category term="windows" /><category term="arch" /><category term="linux" /><category term="dual-boot" /><category term="bootloader" /><category term="systemd-boot" /><summary type="html">During my Arch Linux installation, I accidentally formatted the EFI system partition created by my existing Windows installation and replaced it with a new EFI system that starts Arch Linux using systemd-boot. While my initial goal was to have a Windows 10 / Arch Linux dual boot, I am currently only able to boot under Arch since I deleted my Windows Boot Manager files.</summary></entry><entry><title type="html">How to connect Airpods to Arch Linux with PulseAudio</title><link href="https://meroupatate.github.io/2020/05/03/airpods.html" rel="alternate" type="text/html" title="How to connect Airpods to Arch Linux with PulseAudio" /><published>2020-05-03T00:00:00+00:00</published><updated>2020-05-03T00:00:00+00:00</updated><id>https://meroupatate.github.io/2020/05/03/airpods</id><content type="html" xml:base="https://meroupatate.github.io/2020/05/03/airpods.html">&lt;p&gt;In this article, I will document how I connected my AirPods to my computer running Arch Linux with PulseAudio.&lt;/p&gt;

&lt;p&gt;While I first thought that it would be quite laborious since Apple is not known for worrying about compatibility with platforms other than Apple devices, it turned out that connecting Airpods is not really different from connecting other bluetooth devices.&lt;/p&gt;

&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;
&lt;p&gt;In this tutorial, I will use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bluetoothctl&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pulseaudio&lt;/code&gt;. If you do not have a sound multiplexer installed, I recommend going through the &lt;a href=&quot;https://wiki.archlinux.org/index.php/PulseAudio&quot;&gt;Arch Linux wiki page on installing and configuring PulseAudio&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You will also need to have the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bluez&lt;/code&gt; package installed, which should provide your computer with Bluetooth utilities.&lt;/p&gt;

&lt;p&gt;Once you have BlueZ and PulseAudio installed and configured, you will need to install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pulseaudio-alsa&lt;/code&gt; which provides compability between ALSA and PulseAudio, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pulseaudio-bluetooth&lt;/code&gt; for bluetooth support with PulseAudio and finally &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bluez-utils&lt;/code&gt; providing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bluetoothctl&lt;/code&gt; CLI tool interact with the bluetooth service.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; pacman &lt;span class=&quot;nt&quot;&gt;-S&lt;/span&gt; pulseaudio-alsa pulseaudio-bluetooth bluez-utils
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;pairing-and-connecting-your-airpods-with-bluetoothctl&quot;&gt;Pairing and connecting your Airpods with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bluetoothctl&lt;/code&gt;&lt;/h2&gt;
&lt;p&gt;First of all, you need to start the bluetooth systemd service and kill any existing PulseAudio instance.&lt;/p&gt;
&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; systemctl start bluetooth.service
&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; pulseaudio &lt;span class=&quot;nt&quot;&gt;-k&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that the bluetooth service is running, you can run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bluetoothctl&lt;/code&gt; command and enter its command prompt.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; bluetoothctl
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bluetooth]# power on
Changing power on succeeded
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bluetooth]# agent on
Agent registered
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bluetooth]# default-agent
Default agent request successful
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bluetooth]# scan on
Discovery started
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;At this point your bluetooth pairing agent should be in discovery mode. It means that your computer is ready to connect to your AirPods.&lt;/p&gt;

&lt;p&gt;For your AirPods to be discovered by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bluetoothctl&lt;/code&gt;, you will need to put them into bluetooth pairing mode. With your AirPods in their charging case, open the lid of the charging case and keep the button on the back of the case pressed until the status light flashes white. The white light means that your AirPods are now in pairing mode, which means that if you look back to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bluetoothctl&lt;/code&gt; command prompt, there should be a new line with the MAC address and the name of your AirPods:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;NEW] Device B8:5D:0A:52:EF:86 AirPods
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now that your AirPods have been discovered, you can pair them and connect them with your computer using their MAC address:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bluetooth]# pair B8:5D:0A:52:EF:86
Attempting to pair with B8:5D:0A:52:EF:86
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;...&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Pairing successful
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;bluetooth]# connect B8:5D:0A:52:EF:86
Attempting to connect to B8:5D:0A:52:EF:86
Connection successful
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Your AirPods should now be connected to your computer !&lt;/p&gt;

&lt;p&gt;To automatically connect to your AirPods in the future, you can trust the device by running:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;AirPods]# trust B8:5D:0A:52:EF:86
Changing B8:5D:0A:52:EF:86 trust succeeded
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;You can also change the name of your AirPods by using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bluetoothctl set-alias&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;AirPods]# set-alias &lt;span class=&quot;s2&quot;&gt;&quot;AirPods de Jean Michel&quot;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;CHG] Device B8:5D:0A:52:EF:86 Alias: AirPods de Jean Michel
Changing AirPods de Jean Michel succeeded
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Now if you open the PulseAudio sound control panel &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pavucontrol&lt;/code&gt; you should see your AirPods in the “Output devices” tab below your default internal audio device.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/airpods-01.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If the Airpods don’t show in the control panel, the issue might be that you haven’t installed the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pulseaudio-bluetooth&lt;/code&gt; module.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Now you should have your AirPods working ! As you can see, connecting your AirPods to a Linux device does not require any specific configuration other than standard bluetooth connection tools.&lt;/p&gt;

&lt;p&gt;I hope that this short tutorial can be useful for those of you with AirPods who didn’t know how to connect them with your Arch Linux machine.&lt;/p&gt;

&lt;p&gt;If you need any specific troubleshooting solutions, I highly recommand you going to the Arch Linux wiki, especially to the &lt;a href=&quot;https://wiki.archlinux.org/index.php/Bluetooth_headset&quot;&gt;Bluetooth headset page&lt;/a&gt;, which is quite complete and from which I learned a lot of what I mentioned in this article.&lt;/p&gt;</content><author><name></name></author><category term="airpods" /><category term="arch" /><category term="linux" /><category term="bluetooth" /><category term="pulseaudio" /><summary type="html">In this article, I will document how I connected my AirPods to my computer running Arch Linux with PulseAudio.</summary></entry><entry><title type="html">A possible reason for your Virtualbox VM entering the “gurumeditation” state</title><link href="https://meroupatate.github.io/2020/05/02/gurumeditation.html" rel="alternate" type="text/html" title="A possible reason for your Virtualbox VM entering the “gurumeditation” state" /><published>2020-05-02T00:00:00+00:00</published><updated>2020-05-02T00:00:00+00:00</updated><id>https://meroupatate.github.io/2020/05/02/gurumeditation</id><content type="html" xml:base="https://meroupatate.github.io/2020/05/02/gurumeditation.html">&lt;p&gt;If you are trying to deploy a Virtualbox virtual machine with Vagrant but your VM entered the “gurumeditation” state, then maybe this article can help you.&lt;/p&gt;

&lt;p&gt;I ran into this unexpected error while trying to run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vagrant up&lt;/code&gt; the other day:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The guest machine entered an invalid state while waiting for it
to boot. Valid states are ‘starting, running’. The machine is in the
‘gurumeditation’ state. Please verify everything is configured
properly and try again.&lt;/p&gt;

  &lt;p&gt;If the provider you’re using has a GUI that comes with it,
it is often helpful to open that and watch the machine, since the
GUI often has more helpful error messages than Vagrant can retrieve.
For example, if you’re using VirtualBox, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vagrant up&lt;/code&gt; while the
VirtualBox GUI is open.&lt;/p&gt;

  &lt;p&gt;The primary issue for this error is that the provider you’re using
is not properly configured. This is very rarely a Vagrant issue.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While my first thought was that I actually messed up something with my Virtualbox configuration as suggested in this log, I quickly ran out of ideas once I had gone thought multiple forums that made me reinstall Virtualbox time after time in different versions without success…&lt;/p&gt;

&lt;p&gt;I then proceeded to look into the Virtualbox logs but I found nothing that really helped me to understand what the issue was.&lt;/p&gt;

&lt;p&gt;Finally, I found what I was looking for in this &lt;a href=&quot;https://github.com/kubernetes/minikube/issues/4913#issuecomment-543560593&quot;&gt;Github issue about minikube&lt;/a&gt; !&lt;/p&gt;

&lt;p&gt;In fact, it turns out that the problem was that I had another VM existing on my system that was using KVM. It seems that there is some sort of conflict between Virtualbox and KVM that prevents Virtualbox VM to boot if a KVM machine is running.&lt;/p&gt;

&lt;p&gt;If you actually need to keep your KVM machine running, you may want to look into other providers for your Vagrant VM such as using Libvirt instead of Virtualbox.&lt;/p&gt;

&lt;p&gt;In my case my other VM was started by Minikube using the KVM driver. And since I didn’t need it anymore, I simply deleted it by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;minikube delete&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Then I aborted the gurumeditating VM by running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;killall -9 VBoxHeadless &amp;amp;&amp;amp; vagrant destroy&lt;/code&gt;, which shouldn’t cause too much trouble since there shouldn’t be other Virtualbox VM.&lt;/p&gt;

&lt;p&gt;After that, running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vagrant up&lt;/code&gt; successfully created and configured the VM I wanted to start.&lt;/p&gt;</content><author><name></name></author><category term="virtualbox" /><category term="gurumeditation" /><summary type="html">If you are trying to deploy a Virtualbox virtual machine with Vagrant but your VM entered the “gurumeditation” state, then maybe this article can help you.</summary></entry></feed>